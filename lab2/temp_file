poly.y:

%{
#include <stdio.h>
#include <stdlib.h>
extern int yylex();
extern int yyerror(char *s);
extern FILE *yyin;
extern int yylineno;
%}

%union {
    double num;
    char var;
}

%token <num> NUMBER
%token <var> VARIABLE POLYVAR
%token PLUS MINUS TIMES POWER LPAREN RPAREN ASSIGN PRINT SEMI COMMENT EOL IMPLICIT_MUL UMINUS

%left PLUS MINUS
%left TIMES IMPLICIT_MUL
%right POWER
%right UMINUS

%start program

%%

program: /* empty */
    | program statement
    | program statement EOL
    | program EOL  /* Пустые строки */
;

statement: assignment
    | print_stmt  
    | expr        /* Вычисляет и печатает */
    | COMMENT     /* Игнорируется */
;

assignment: POLYVAR ASSIGN expr SEMI
    | POLYVAR ASSIGN expr  /* Без точки с запятой */
;

print_stmt: PRINT expr SEMI
    | PRINT expr  /* Без точки с запятой */
;

expr: expr PLUS expr
    | expr MINUS expr
    | expr TIMES expr
    | expr POWER NUMBER
    | LPAREN expr RPAREN
    | MINUS expr %prec UMINUS
    | NUMBER
    | VARIABLE
    | POLYVAR
    | NUMBER VARIABLE %prec IMPLICIT_MUL
    | NUMBER LPAREN expr RPAREN %prec IMPLICIT_MUL
    | VARIABLE LPAREN expr RPAREN %prec IMPLICIT_MUL
;

%%

int yyerror(char *s) {
    fprintf(stderr, "Line %d: %s\n", yylineno, s);
    return 0;
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    yyin = fopen(argv[1], "r");
    if (!yyin) {
        perror("fopen");
        return 1;
    }
    
    yyparse();
    fclose(yyin);
    return 0;
}




lex.l:
%{
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.h"

/* Не определяем yylineno - flex сделает это сам */
%}

DIGIT [0-9]
NUMBER {DIGIT}+(\.{DIGIT}+)?

%%

{NUMBER}        { yylval.num = atof(yytext); return NUMBER; }
[a-zA-Z]        { yylval.var = yytext[0]; return VARIABLE; }
\$[a-zA-Z]      { yylval.var = yytext[1]; return POLYVAR; }

"+"             { return PLUS; }
"-"             { return MINUS; }
"*"             { return TIMES; }
"^"             { return POWER; }
"("             { return LPAREN; }
")"             { return RPAREN; }
"="             { return ASSIGN; }
"print"         { return PRINT; }
";"             { return SEMI; }

"//".*          { /* Комментарий - игнорируем */ }
\n              { yylineno++; return EOL; }
[ \t\r]+        { /* Пробелы - игнорируем */ }

.               { 
                  fprintf(stderr, "Line %d: Lexical error: Unexpected character '%c' (ASCII %d)\n", 
                          yylineno, yytext[0], yytext[0]); 
                  return -1; 
                }

%%

int yywrap() { 
    return 1; 
}