%{
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.h"  /* Generated by bison/yacc, includes token definitions */

extern int yylval;  /* For storing integer values, if needed */

int line_number = 1;  /* Manual line counter, in case yylineno is not reliable across platforms */
%}

%option yylineno  /* Enable automatic line number tracking */

DIGIT   [0-9]
LETTER  [a-zA-Z]
ID      [a-z]  /* Variables like x, y, z */
POLY_ID \$[A-Z]  /* Polynomial variables like $A, $B */

%%

{DIGIT}+    { yylval = atoi(yytext); return NUMBER; }  /* Integer coefficients */

{ID}        { yylval = yytext[0]; return VAR; }  /* Single lowercase letter for variables like x */

{POLY_ID}   { yylval = yytext[1]; return POLYVAR; }  /* $ followed by uppercase, store the letter */

"print"     { return PRINT; }  /* Keyword for printing */

"+"         { return PLUS; }
"-"         { return MINUS; }
"*"         { return MUL; }
"/"         { return DIV; }
"^"         { return POW; }
"'"         { return DERIV; }  /* Derivative operator */
"("         { return LPAREN; }
")"         { return RPAREN; }
"="         { return ASSIGN; }
";"         { return SEMI; }

"#"[^ \n]*  { /* Ignore comments starting with # until end of line */ }

[ \t]       { /* Ignore whitespace */ }

\n          { line_number++; return NEWLINE; }  /* Track new lines for error reporting */

.           { fprintf(stderr, "Lexical error on line %d: Unknown character '%s'\n", line_number, yytext); return UNKNOWN; }  /* Catch invalid characters */

%%

int yywrap() {
    return 1;  /* End of input */
}